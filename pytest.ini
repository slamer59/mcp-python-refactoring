[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src/mcp_refactoring_assistant
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    -ra

# Test markers
markers =
    unit: Pure unit tests (fast, isolated)
    functional: Integration-style functional tests
    slow: Slow tests (performance, large datasets)
    mcp: MCP protocol specific tests
    smoke: Quick validation tests for CI
    integration: End-to-end integration tests
    parametrized: Tests with multiple parameter sets
    regression: Regression tests for known issues
    performance: Performance and benchmarking tests

# Minimum Python version
minversion = 6.0

# Test timeout (in seconds)
timeout = 300

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:rope.*
    ignore::PendingDeprecationWarning

# Coverage configuration
[coverage:run]
source = src/
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */migrations/*
    */venv/*
    */virtualenv/*
    */.tox/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Show missing lines in coverage report
show_missing = True
skip_covered = False
precision = 2

[coverage:html]
directory = htmlcov